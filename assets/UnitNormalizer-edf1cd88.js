import{e as l}from"./getDefaultUnitForView-33179f7a.js";import{bg as u,iE as h,lo as f,bt as m,bu as p,bv as n,bf as s}from"./main-79e5ed80.js";const U={readOnly:!0,get(){return l(this.view)}};var a;(function(t){t[t.Auto=0]="Auto",t[t.Euclidean=1]="Euclidean",t[t.Geodesic=2]="Geodesic"})(a||(a={}));function g(t,e){if(u(e,0,0,0),t.length>0){for(let r=0;r<t.length;++r)h(e,e,t[r]);f(e,e,1/t.length)}}function v(t,e,r,i){i.projectToRenderScreen(t,o),i.projectToRenderScreen(e,c),m(r,R,_),p(r,r)}const o=n(),_=o,c=n(),R=c;class b{constructor(e=null){this.spatialReference=e}get spatialReference(){return this._spatialReference}set spatialReference(e){e!==this._spatialReference&&(this._spatialReference=e,this._updateNormalizationFactors())}normalizeDistance(e){return e*this._metersPerDistanceUnit}normalizeElevation(e){return e*this._metersPerElevationUnit}normalizeArea(e){return e*this._squareMetersPerAreaUnit}_updateNormalizationFactors(){this._metersPerDistanceUnit=s(this._spatialReference,1),this._metersPerElevationUnit=s(this._spatialReference,1),this._squareMetersPerAreaUnit=this._metersPerDistanceUnit*this._metersPerDistanceUnit}}export{U as a,g as b,a as e,v as f,b as t};

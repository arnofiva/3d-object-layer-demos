import{ax as p,c$ as l,fN as o,fQ as g,fR as _,cL as d,aB as u,aw as f,av as w,cd as E}from"./main-79e5ed80.js";import{m as q}from"./FeatureStore-48143fe8.js";import{g as F,e as x,f as S}from"./QueryEngine-360bd3bb.js";import{T,I}from"./geojson-2e35dfdf.js";import{d as b}from"./sourceUtils-fdf97eb6.js";import{H as j}from"./wfsUtils-7f61c558.js";import"./BoundsStore-d475102f.js";import"./PooledRBush-506b9510.js";import"./quickselect-d16016af.js";import"./optimizedFeatureQueryEngineAdapter-f5f88773.js";import"./centroid-3dcadaf5.js";import"./normalizeUtils-996b11fe.js";import"./normalizeUtilsCommon-4aa2ad72.js";import"./WhereClause-ae8c5a06.js";import"./executionError-e8d36121.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-a3586684.js";import"./generateRendererUtils-0f364d1e.js";import"./xmlUtils-444cb4c0.js";class K{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async t=>{const{objectIdField:e}=this._queryEngine,i=await j(this._getFeatureUrl??"",this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(r=>r.name),signal:t});await T(i),p(t);const s=I(i,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:e});if(!l(this._queryEngine.spatialReference,o))for(const r of s)r.geometry!=null&&(r.geometry=g(F(_(r.geometry,this._queryEngine.geometryType,!1,!1),o,this._queryEngine.spatialReference)));let n=1;for(const r of s){const a={};b(this._fieldsIndex,a,r.attributes,!0),r.attributes=a,r.attributes[e]==null&&(r.objectId=r.attributes[e]=n++)}return s}}destroy(){this._queryEngine?.destroy(),this._queryEngine=null}async load(t,e){const{getFeatureUrl:i,getFeatureOutputFormat:s,spatialReference:n,fields:r,geometryType:a,featureType:h,objectIdField:y,customParameters:c}=t;this._featureType=h,this._customParameters=c,this._getFeatureUrl=i,this._getFeatureOutputFormat=s,this._fieldsIndex=new d(r),await this._checkProjection(n),p(e),this._queryEngine=new x({fields:r,geometryType:a,hasM:!1,hasZ:!1,objectIdField:y,spatialReference:n,timeInfo:null,featureStore:new q({geometryType:a,hasM:!1,hasZ:!1})});const m=await this._snapshotFeatures(e.signal);return this._queryEngine.featureStore.addMany(m),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async applyEdits(){throw new u("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(t,e.signal)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(t,e.signal)}async refresh(t){return this._customParameters=t,this._snapshotTask?.abort(),this._snapshotTask=f(this._snapshotFeatures),this._snapshotTask.promise.then(e=>{this._queryEngine.featureStore.clear(),e&&this._queryEngine.featureStore.addMany(e)},e=>{this._queryEngine.featureStore.clear(),w(e)||E.getLogger("esri.layers.WFSLayer").error(new u("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:e}))}),await this._waitSnapshotComplete(),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(t){try{await S(o,t)}catch{throw new u("unsupported-projection","Projection not supported",{spatialReference:t})}}}export{K as default};

import{bA as Z,aB as G,b1 as J,bB as _,aW as tt,bC as R,bD as et,bE as nt,bF as st}from"./main-79e5ed80.js";function K(t){if(!t)return null;if(et(t)&&t.wkid){const e=nt[t.wkid];if(e)return e}if(t.wkt){const e=at(t.wkt);if(e)return e}return null}function at(t){const e=st.exec(t);if(!e||e.length!==2)return null;const n=e[1].split(",");if(!n||n.length<3)return null;const l=parseFloat(n[1]),s=parseFloat(n[2]);return isNaN(l)||isNaN(s)?null:{a:l,f:s===0?0:1/s}}function P(t){const e=K(t??Z.WGS84);if(it(e))return e;const n=e.a*(1-e.f);return Object.assign(e,{b:n,eSq:1-(n/e.a)**2,radius:(2*e.a+n)/3,densificationRatio:1e4/((2*e.a+n)/3)})}function it(t){return t!=null&&"b"in t&&"eSq"in t&&"radius"in t}function I(t,e,n){const{a:l,eSq:s}=P(n),a=Math.sqrt(s),r=Math.sin(e[1]*R),i=l*e[0]*R;let h;return s>0?h=l*((1-s)*(r/(1-s*(r*r))-1/(2*a)*Math.log((1-a*r)/(1+a*r))))*.5:h=l*r,t[0]=i,t[1]=h,t}function D(t){return K(t)!==null}function ht(t,e="square-meters"){if(t.some(r=>!D(r.spatialReference)))throw new G("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const n=[];for(let r=0;r<t.length;r++){const i=t[r],h=i.spatialReference,{radius:c,densificationRatio:u}=P(h),o=c*u;n.push(ot(i,o))}const l=[],s=[0,0],a=[0,0];for(let r=0;r<n.length;r++){const{rings:i,spatialReference:h}=n[r];let c=0;for(let u=0;u<i.length;u++){const o=i[u];I(s,o[0],h),I(a,o[o.length-1],h);let M=a[0]*s[1]-s[0]*a[1];for(let d=0;d<o.length-1;d++)I(s,o[d+1],h),I(a,o[d],h),M+=a[0]*s[1]-s[0]*a[1];c+=M}c=J(c,"square-meters",e),l.push(c/-2)}return l}function ct(t,e="meters"){if(!t)throw new G("geodesic-lengths:invalid-geometries","the input geometries type is not supported");if(t.some(l=>!D(l.spatialReference)))throw new G("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const n=[];for(let l=0;l<t.length;l++){const s=t[l],{spatialReference:a}=s,r=s.type==="polyline"?s.paths:s.rings;let i=0;for(let h=0;h<r.length;h++){const c=r[h];let u=0;for(let o=1;o<c.length;o++){const M=c[o-1][0],d=c[o][0],y=c[o-1][1],g=c[o][1];if(y!==g||M!==d){const p=new L;Q(p,[M,y],[d,g],a),u+=p.distance}}i+=u}i=J(i,"meters",e),n.push(i)}return n}function ot(t,e){if(t.type!=="polyline"&&t.type!=="polygon")throw new G("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:n}=t;if(!D(n))throw new G("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const l=t.type==="polyline"?t.paths:t.rings,s=[],a=[0,0],r=new L;for(const i of l){const h=[];s.push(h),h.push([i[0][0],i[0][1]]);let c,u,o=i[0][0],M=i[0][1];for(let d=0;d<i.length-1;d++){if(c=i[d+1][0],u=i[d+1][1],o===c&&M===u)continue;const y=[o,M];Q(r,[o,M],[c,u],n);const{azimuth:g,distance:p}=r,b=p/e;if(b>1){for(let m=1;m<=b-1;m++)W(a,y,g,m*e,n),h.push(a.slice(0));W(a,y,g,(p+Math.floor(b-1)*e)/2,n),h.push(a.slice(0))}W(a,y,g,p,n),h.push(a.slice(0)),o=a[0],M=a[1]}}return t.type==="polyline"?new _({paths:s,spatialReference:n}):new tt({rings:s,spatialReference:n})}class L{constructor(e=0,n=void 0,l=void 0){this.distance=e,this.azimuth=n,this.reverseAzimuth=l}}function W(t,e,n,l,s){const a=e[0],r=e[1],i=a*R,h=r*R,c=(n??0)*R,{a:u,b:o,f:M}=P(s),d=Math.sin(c),y=Math.cos(c),g=(1-M)*Math.tan(h),p=1/Math.sqrt(1+g*g),b=g*p,m=Math.atan2(g,y),x=p*d,S=x*x,z=1-S,f=z*(u*u-o*o)/(o*o),j=1+f/16384*(4096+f*(f*(320-175*f)-768)),F=f/1024*(256+f*(f*(74-47*f)-128));let v,N,w,$,k=l/(o*j),q=2*Math.PI;for(;Math.abs(k-q)>1e-12;)w=Math.cos(2*m+k),v=Math.sin(k),N=Math.cos(k),$=F*v*(w+F/4*(N*(2*w*w-1)-F/6*w*(4*v*v-3)*(4*w*w-3))),q=k,k=l/(o*j)+$;const A=b*v-p*N*y,E=Math.atan2(b*N+p*v*y,(1-M)*Math.sqrt(S+A*A)),B=Math.atan2(v*d,p*N-b*v*y),C=M/16*z*(4+M*(4-3*z)),O=E/R,U=(i+(B-(1-C)*M*x*(k+C*v*(w+C*N*(2*w*w-1)))))/R;return t[0]=U,t[1]=O,t}function Q(t,e,n,l){const s=e[0]*R,a=e[1]*R,r=n[0]*R,i=n[1]*R,{a:h,b:c,f:u,radius:o}=P(l),M=r-s,d=Math.atan((1-u)*Math.tan(a)),y=Math.atan((1-u)*Math.tan(i)),g=Math.sin(d),p=Math.cos(d),b=Math.sin(y),m=Math.cos(y);let x,S,z,f,j,F,v,N,w,$,k=1e3,q=M;do{if(v=Math.sin(q),N=Math.cos(q),z=Math.sqrt(m*v*(m*v)+(p*b-g*m*N)*(p*b-g*m*N)),z===0)return t.distance=0,t.azimuth=void 0,t.reverseAzimuth=void 0,t;j=g*b+p*m*N,F=Math.atan2(z,j),w=p*m*v/z,S=1-w*w,f=j-2*g*b/S,isNaN(f)&&(f=0),$=u/16*S*(4+u*(4-3*S)),x=q,q=M+(1-$)*u*w*(F+$*z*(f+$*j*(2*f*f-1)))}while(Math.abs(q-x)>1e-12&&--k>0);if(k===0){const U=o,T=Math.acos(Math.sin(a)*Math.sin(i)+Math.cos(a)*Math.cos(i)*Math.cos(r-s))*U,H=r-s,V=Math.sin(H)*Math.cos(i),X=Math.cos(a)*Math.sin(i)-Math.sin(a)*Math.cos(i)*Math.cos(H),Y=Math.atan2(V,X);return t.azimuth=Y/R,t.distance=T,t.reverseAzimuth=void 0,t}const A=S*(h*h-c*c)/(c*c),E=A/1024*(256+A*(A*(74-47*A)-128)),B=c*(1+A/16384*(4096+A*(A*(320-175*A)-768)))*(F-E*z*(f+E/4*(j*(2*f*f-1)-E/6*f*(4*z*z-3)*(4*f*f-3)))),C=Math.atan2(m*Math.sin(q),p*b-g*m*Math.cos(q)),O=Math.atan2(p*Math.sin(q),p*b*Math.cos(q)-g*m);return t.azimuth=C/R,t.distance=B,t.reverseAzimuth=O/R,t}export{D as M,L as R,Q as b,ht as w,ct as y,W as z};

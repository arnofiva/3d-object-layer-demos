var S=Object.defineProperty,d=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var c=Object.getOwnPropertySymbols;var O=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var f=(i,e,t)=>e in i?S(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t,u=(i,e)=>{for(var t in e||(e={}))O.call(e,t)&&f(i,t,e[t]);if(c)for(var t of c(e))x.call(e,t)&&f(i,t,e[t]);return i},p=(i,e)=>d(i,h(e));import{r as n,ap as l,aZ as y,n_ as N}from"./vendor.fd144a9e.js";import{u as a}from"./PixelBlock.2733b9cf.js";import{m as J,S as b,U as g,a as w,M as k,u as z,C as B,b as v,p as P,c as D}from"./dataUtils.5fc24393.js";import{M as T,k as $,V as M}from"./rasterProjectionHelper.b057bdd8.js";import{i as E}from"./utils.c5871764.js";class C{convertVectorFieldData(e){const t=a.fromJSON(e.pixelBlock),s=J(t,e.type);return Promise.resolve(n(s)&&s.toJSON())}async decode(e){const t=await b(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a.fromJSON(e.pixelBlock),e.extent=e.extent?l.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(n(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=g.fromJSON(e.symbolizerJSON),e.histograms&&((t=this.symbolizer)==null?void 0:t.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(a.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(n(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=w(a.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=k(a.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((s,o)=>{t.set(o,s==null?void 0:s.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map(m=>m?new a(m):null),s=z(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let o,r=s;return e.coefs&&(r=B(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(o=v(e.destDimension,e.gcsGrid),r=y(P(r,e.isUV?"vector-uv":"vector-magdir",o))),{pixelBlock:r==null?void 0:r.toJSON(),localNorthDirections:o}}async createFlowMesh(e,t){const s={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:o,indexData:r}=await D(e.meshType,e.simulationSettings,s,t.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:r.buffer},transferList:[o.buffer,r.buffer]}}async getProjectionOffsetGrid(e){const t=l.fromJSON(e.projectedExtent),s=l.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationSteps&&(o=new N({steps:e.datumTransformationSteps})),(e.includeGCSGrid||T(t.spatialReference,s.spatialReference,o))&&await $();const r=e.rasterTransform?E(e.rasterTransform):null;return M(p(u({},e),{projectedExtent:t,srcBufferExtent:s,datumTransformation:o,rasterTransform:r}))}}export{C as default};

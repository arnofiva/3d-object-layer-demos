import{gY as r,gZ as c,cg as y,g_ as h,g$ as w}from"./main-79e5ed80.js";import b from"./Mesh-d3af21f3.js";import{h as L}from"./GraphicsLayer-6532b5a8.js";import{a as v}from"./SketchViewModel-0c15215b.js";import"./calcite-block-28b862d1.js";import"./button-a95c5efa.js";import"./MeshGeoreferencedRelativeVertexSpace-4cbafb45.js";import"./MeshLocalVertexSpace-0353b8cf.js";import"./MeshTransform-d557c89a.js";import"./georeference-ab089445.js";import"./External-2117cdfc.js";import"./elevationInfoUtils-287337e4.js";import"./geodesicUtils-04ddd9a4.js";import"./SnappingManager-e561e372.js";import"./geometry2dUtils-9d16f4f8.js";import"./viewUtils-ca2c33e3.js";import"./conditionalSlot-7211d13e.js";import"./observers-7949b362.js";import"./guid-4f97587b.js";import"./interactive-1607c36d.js";import"./t9n-460cb030.js";import"./key-89f6acdc.js";import"./focusTrapComponent-2107ee6f.js";import"./action-9e20b9c8.js";import"./loadable-7d140904.js";import"./icon-3b706e0b.js";import"./loader-142f20e1.js";import"./action-menu-adc47a20.js";import"./popover-a38f0fbf.js";import"./openCloseComponent-2d424455.js";import"./debounce-c198f28b.js";import"./FloatingArrow-52fee7c7.js";import"./scrim-13194b98.js";import"./form-9c9dba1f.js";import"./label2-890d1a34.js";function E(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,t=>(t^crypto.getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16))}const g=()=>document.getElementById("msg"),p=t=>g().textContent=String(t),I=()=>g().style.opacity="1",M=()=>g().style.opacity="0",U=(t=3e3)=>{setTimeout(M,t)},i=new L({elevationInfo:{mode:"absolute-height"}});r.map.add(i);const f=new v({layer:i,view:r});r.when().then(async()=>{m=r.center;const t=document.getElementById("block");r.ui.add(t,"top-right"),document.getElementById("upload-model-button").addEventListener("click",k),r.container.addEventListener("drop",e=>B(e)),r.container.addEventListener("dragover",e=>F(e))});async function d(t,o){const e=await b.createFromFiles(t,[o],{layer:c});await e.load();const n={},s=c.fields.filter(l=>l.type==="global-id")[0].name;n[s]=`{${E()}}`;const a=new y({geometry:e,attributes:n,symbol:new h({symbolLayers:[new w({material:{color:[255,255,255,1]}})]})});i.add(a),f.update(a);const u=f.on("update",async l=>{l.state==="complete"&&(console.log(a),u.remove(),await c.applyEdits({addFeatures:[a]}),i.remove(a))})}async function k(){let t=document.createElement("input");t.type="file",t.onchange=async()=>{const o=t.files;if(o){let e=Array.from(o);URL.createObjectURL(e[0]),d(r.center,e[0])}},t.click()}let m;async function B(t){t.preventDefault();const o=t.dataTransfer&&t.dataTransfer.items,e=t.dataTransfer&&t.dataTransfer.files;if(o&&o.length){const n=o[0];if(n.kind==="file"){const s=n.getAsFile();p("Uploading and placing the model ..."),await d(m,s),p("Model placed"),U()}}else e&&e.length&&d(m,e[0])}function F(t){I(),p("Place model anywhere in the view ..."),m=r.toMap(t),t.preventDefault()}

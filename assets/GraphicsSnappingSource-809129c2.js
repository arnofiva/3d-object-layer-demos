import{dA as f,au as v,aU as h,cr as S,dY as w,gd as E,ax as d,aw as b,ge as k,aW as F,gf as u,dm as C,eZ as A,fQ as R,cE as G,gg as P,aD as r,aE as p,aF as I,gc as x,gh as O}from"./main-79e5ed80.js";import{a as Z}from"./normalizeUtilsSync-f1a97bc7.js";import{m as $}from"./FeatureStore-48143fe8.js";import{e as z}from"./QueryEngine-360bd3bb.js";import{m as H}from"./elevationInfoUtils-287337e4.js";import{u as L,b as M}from"./SnappingManager-e561e372.js";import{i as W,o as j}from"./queryEngineUtils-fc6b642b.js";import{i as y,r as q,n as g}from"./symbologySnappingCandidates-67dc9cb4.js";import"./normalizeUtilsCommon-4aa2ad72.js";import"./BoundsStore-d475102f.js";import"./PooledRBush-506b9510.js";import"./quickselect-d16016af.js";import"./optimizedFeatureQueryEngineAdapter-f5f88773.js";import"./centroid-3dcadaf5.js";import"./normalizeUtils-996b11fe.js";import"./WhereClause-ae8c5a06.js";import"./executionError-e8d36121.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-a3586684.js";import"./generateRendererUtils-0f364d1e.js";import"./geometry2dUtils-9d16f4f8.js";import"./viewUtils-ca2c33e3.js";import"./VertexSnappingCandidate-25d2058a.js";import"./PointSnappingHint-b8c54ed3.js";const m="graphics-collections";let a=class extends f(v){get updating(){return this.updatingHandles.updating}get _hasZ(){const e=this.view;return e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,i=e!=null&&e.type==="3d";if(!i||t.type==="map-notes")return y();const s=async(o,n)=>(await x(e.whenLayerView(t),n)).elevationAlignPointsInFeatures(o,n);return y(i,{elevationInfo:t.elevationInfo,alignPointsInFeatures:s,spatialReference:e.spatialReference})}get _snappingElevationFilter(){const{view:e}=this,t=e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes";return q(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,i=e!=null&&e.type==="3d",s=this._extrudedPolygonSymbolsCount>0;return i&&t.type!=="map-notes"&&s?g(s,async(o,n)=>{const l=await e.whenLayerView(t);return d(n),l.queryForSymbologySnapping({candidates:o,spatialReference:e.spatialReference},n)}):g()}constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources(e=>this._destroySource(e))}initialize(){this.updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this.updatingHandles.removeHandles(m);for(const s of i)this._addMany(s.graphics.toArray()),this.handles.add([s.on("graphic-update",o=>this._onGraphicUpdate(o)),this.updatingHandles.addOnCollectionChange(()=>s.graphics,o=>this._onGraphicsChanged(o))],m)},h);const{view:e}=this,{layer:t}=this.layerSource;e!=null&&e.type==="3d"&&t.type!=="map-notes"&&this.addHandles([e.elevationProvider.on("elevation-change",({context:i})=>{H(i,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),S(()=>t.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),h),w(()=>t,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(e,t){const{point:i}=e,s=await E(this._mapSources(l=>this._fetchCandidatesForSource(l,e,t)));d(t);const o=this._getGroundElevation,n=s.flat().map(l=>W(l,o));return L(i,n),n}get _getGroundElevation(){return j(this.view)}async _fetchCandidatesForSource(e,t,i){const s=M(t,this.view?.type??"2d"),o=await e.queryEngine.executeQueryForSnapping(s,i);d(i);const n=await this._snappingElevationAligner.alignCandidates(o.candidates,i);d(i);const l=await this._symbologySnappingFetcher.fetch(n,i);d(i);const _=l.length===0?n:[...n,...l];return this._snappingElevationFilter.filter(s,_)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some(t=>t.graphics.includes(e.graphic)))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],i=new Map;for(const s of e)s.geometry!=null&&(this._needsInitializeProjection(s.geometry.spatialReference)?(t.push(s.geometry.spatialReference),i.set(s.uid,s)):this._add(s));this._createPendingAdd(t,i)}_createPendingAdd(e,t){if(!e.length)return;const i=b(async n=>{await k(e.map(l=>({source:l,dest:this.spatialReference})),{signal:n}),this._markLoadedSpatialReferences(e);for(const[,l]of t)this._add(l)});this.updatingHandles.addPromise(i.promise);const s={task:i,graphics:t},o=()=>O(this._pendingAdds,s);i.promise.then(o,o),this._pendingAdds.push(s)}_markLoadedSpatialReferences(e){for(const t of e)t.wkid!=null&&this._loadedWkids.add(t.wkid),t.wkt!=null&&this._loadedWkts.add(t.wkt)}_add(e){if(e.geometry==null||!e.visible)return;let t=e.geometry;if(t.type==="mesh")return;t.type==="extent"&&(t=F.fromExtent(t));const i=this._ensureSource(t.type);if(i==null)return;const s=this._createOptimizedFeature(e.uid,t);s!=null&&(i.featureStore.add(s),u(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){return(e.wkid==null||!this._loadedWkids.has(e.wkid))&&(e.wkt==null||!this._loadedWkts.has(e.wkt))&&!C(e,this.spatialReference)}_createOptimizedFeature(e,t){const i=A(Z(t),this.spatialReference);if(!i)return null;const s=this._ensureGeometryHasZ(i),o=R(s,this._hasZ,!1);return new G(o,{[c]:e},null,e)}_ensureGeometryHasZ(e){if(!this._hasZ)return e;const t=s=>{for(;s.length<3;)s.push(0)},i=e.clone();switch(i.hasZ=!0,i.type){case"point":i.z=i.z??0;break;case"multipoint":i.points.forEach(t);break;case"polyline":i.paths.forEach(s=>s.forEach(t));break;case"polygon":i.rings.forEach(s=>s.forEach(t))}return i}_ensureSource(e){const t=this._sources[e];if(t!=null)return t;const i=this._createSource(e);return this._sources[e]=i,i}_createSource(e){const t=P.toJSON(e),i=this._hasZ,s=new $({geometryType:t,hasZ:i,hasM:!1});return{featureStore:s,queryEngine:new z({featureStore:s,fields:[{name:c,type:"esriFieldTypeOID",alias:c}],geometryType:t,hasM:!1,hasZ:i,objectIdField:c,spatialReference:this.spatialReference,scheduler:this.view!=null&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources(t=>this._removeFromSource(t,e));for(const t of this._pendingAdds)t.graphics.delete(e.uid),t.graphics.size===0&&t.task.abort()}_removeFromSource(e,t){const i=t.uid;e.featureStore.has(i)&&(e.featureStore.removeById(t.uid),u(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:i,polyline:s,multipoint:o}=this._sources,n=[];return t!=null&&n.push(e(t)),i!=null&&n.push(e(i)),s!=null&&n.push(e(s)),o!=null&&n.push(e(o)),n}};r([p()],a.prototype,"getGraphicsLayers",void 0),r([p({constructOnly:!0})],a.prototype,"layerSource",void 0),r([p({constructOnly:!0})],a.prototype,"spatialReference",void 0),r([p({constructOnly:!0})],a.prototype,"view",void 0),r([p({readOnly:!0})],a.prototype,"updating",null),r([p({readOnly:!0})],a.prototype,"availability",void 0),r([p()],a.prototype,"_hasZ",null),r([p()],a.prototype,"_snappingElevationAligner",null),r([p()],a.prototype,"_snappingElevationFilter",null),r([p()],a.prototype,"_symbologySnappingFetcher",null),r([p()],a.prototype,"_extrudedPolygonSymbolsCount",void 0),r([p()],a.prototype,"_getGroundElevation",null),a=r([I("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],a);const c="OBJECTID";export{a as GraphicsSnappingSource};

import{fA as m,fB as p,fz as g,fC as y,fD as w,fE as d,az as _}from"./index-cdda5707.js";class I{constructor(){this.code=null,this.description=null}}class b{constructor(n){this.error=new I,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=n}}function f(e){return new b(e)}class v{constructor(n){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=n}}function z(e){return new v(e)}const a=new Set;function V(e,n,i,h=!1,u){a.clear();for(const r in i){const t=e.get(r);if(!t)continue;const l=i[r],s=q(t,l);if(s!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:t,originalValue:l,sanitizedValue:s}}),a.add(t.name),t&&(h||t.editable)){const c=m(t,s);if(c)return f(p(c,t,s));n[t.name]=s}}for(const r of e?.requiredFields??[])if(!a.has(r.name))return f(`missing required field "${r.name}"`);return null}function q(e,n){let i=n;return typeof n=="string"&&g(e)?i=parseFloat(n):n!=null&&y(e)&&typeof n!="string"&&(i=String(n)),w(i)}let o;function j(e,n){if(!e||!d(n))return e;if("rings"in e||"paths"in e){if(o==null)throw new TypeError("geometry engine not loaded");return o.simplify(n,e)}return e}async function E(){return o==null&&(o=await _(()=>import("./geometryEngineJSON-71004d22.js"),["./geometryEngineJSON-71004d22.js","./geometryEngineBase-7a1f11c2.js","./index-cdda5707.js","./index-7772480e.css","./geometryEngineJSON-b77f7530.js","./json-48e3ea08.js"],import.meta.url)),o}async function A(e,n){!d(e)||n!=="esriGeometryPolygon"&&n!=="esriGeometryPolyline"||await E()}export{z as c,V as d,j as h,f as u,A as y};
